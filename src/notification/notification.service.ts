import { Injectable, Logger } from '@nestjs/common';

// ƒê·ªãnh nghƒ©a m·ªôt ki·ªÉu d·ªØ li·ªáu ƒë∆°n gi·∫£n cho item ƒë·ªÉ truy·ªÅn v√†o kitchen
interface KitchenItem {
  productId: string;
  quantity: number;
  name?: string; // T√™n s·∫£n ph·∫©m (t√πy ch·ªçn nh∆∞ng h·ªØu √≠ch)
}

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  /**
   * M√¥ ph·ªèng vi·ªác g·ª≠i th√¥ng tin ƒë∆°n h√†ng ƒë·∫øn h·ªá th·ªëng hi·ªÉn th·ªã c·ªßa b·∫øp.
   * @param orderId ID c·ªßa ƒë∆°n h√†ng.
   * @param items Danh s√°ch c√°c m√≥n h√†ng c·∫ßn chu·∫©n b·ªã.
   */
  async notifyKitchen(orderId: string, items: KitchenItem[]): Promise<void> {
    this.logger.log(`üç≥ Notifying Kitchen for Order ID: ${orderId}`);

    if (!items || items.length === 0) {
      this.logger.warn(`No items provided for kitchen notification, Order ID: ${orderId}`);
      return; // Kh√¥ng c√≥ g√¨ ƒë·ªÉ th√¥ng b√°o
    }

    // ƒê·ªãnh d·∫°ng l·∫°i danh s√°ch item cho d·ªÖ ƒë·ªçc trong log
    const formattedItems = items.map(item =>
      `  - ${item.quantity}x ${item.name || `Product(${item.productId})`}` // Hi·ªÉn th·ªã t√™n n·∫øu c√≥, n·∫øu kh√¥ng th√¨ ID
    ).join('\n'); // M·ªói item m·ªôt d√≤ng

    // --- B·∫Øt ƒë·∫ßu M√¥ ph·ªèng g·ªçi API/H·ªá th·ªëng B·∫øp ---
    console.log("================ KITCHEN ORDER ================");
    console.log(` ORDER ID: ${orderId}`);
    console.log(" Items to Prepare:");
    console.log(formattedItems);
    console.log("=============================================");
    // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
    await new Promise(resolve => setTimeout(resolve, 300)); // 300ms delay gi·∫£ l·∫≠p
    // --- K·∫øt th√∫c M√¥ ph·ªèng ---

    // Gi·∫£ s·ª≠ lu√¥n th√†nh c√¥ng trong b·∫£n mock n√†y
    this.logger.log(`‚úÖ Successfully notified Kitchen for Order ID: ${orderId}`);
    // Trong th·ª±c t·∫ø, ·ªü ƒë√¢y c√≥ th·ªÉ c√≥ try...catch ƒë·ªÉ x·ª≠ l√Ω l·ªói khi g·ªçi API b·∫øp
  }

  /**
   * M√¥ ph·ªèng vi·ªác g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng cho kh√°ch h√†ng.
   * @param email ƒê·ªãa ch·ªâ email c·ªßa kh√°ch h√†ng.
   * @param orderId ID c·ªßa ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.
   */
  async sendOrderConfirmationEmail(email: string, orderId: string): Promise<void> {
    this.logger.log(`üìß Attempting to send Order Confirmation Email to: ${email} for Order ID: ${orderId}`);

    // --- B·∫Øt ƒë·∫ßu M√¥ ph·ªèng g·ª≠i Email ---
    console.log("\n--- Sending Confirmation Email ---");
    console.log(`To: ${email}`);
    console.log(`Subject: ‚úÖ Your Ga Ran Temporal Order Confirmation (#${orderId})`);
    console.log(`Body:`);
    console.log(` Hi there,`);
    console.log(` `);
    console.log(` Your delicious chicken order #${orderId} has been confirmed and is being prepared!`);
    console.log(` We'll notify you again when it's ready or shipped.`);
    console.log(` `);
    console.log(` Thanks for your order!`);
    console.log(` - The Ga Ran Temporal Team`);
    console.log("----------------------------------\n");
    // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
    await new Promise(resolve => setTimeout(resolve, 500)); // 500ms delay gi·∫£ l·∫≠p
    // --- K·∫øt th√∫c M√¥ ph·ªèng ---

    // Gi·∫£ s·ª≠ lu√¥n th√†nh c√¥ng
    this.logger.log(`‚úÖ Successfully simulated sending confirmation email for Order ID: ${orderId} to ${email}`);
     // Trong th·ª±c t·∫ø, ·ªü ƒë√¢y c√≥ th·ªÉ c√≥ try...catch ƒë·ªÉ x·ª≠ l√Ω l·ªói khi g·ªçi d·ªãch v·ª• email (SendGrid, Mailgun, etc.)
  }

  /**
   * M√¥ ph·ªèng vi·ªác g·ª≠i email th√¥ng b√°o l·ªói/h·ªßy ƒë∆°n h√†ng cho kh√°ch h√†ng.
   * @param email ƒê·ªãa ch·ªâ email c·ªßa kh√°ch h√†ng.
   * @param orderId ID c·ªßa ƒë∆°n h√†ng b·ªã l·ªói/h·ªßy.
   * @param reason L√Ω do ƒë∆°n h√†ng th·∫•t b·∫°i (ƒë∆∞·ª£c truy·ªÅn t·ª´ workflow).
   */
  async sendOrderFailedEmail(email: string, orderId: string, reason: string): Promise<void> {
    this.logger.warn(`üö® Attempting to send Order Failure Email to: ${email} for Order ID: ${orderId}. Reason: ${reason}`);

     // --- B·∫Øt ƒë·∫ßu M√¥ ph·ªèng g·ª≠i Email L·ªói ---
     console.log("\n--- Sending Order Failure Email ---");
     console.log(`To: ${email}`);
     console.log(`Subject: ‚ö†Ô∏è Issue with your Ga Ran Temporal Order (#${orderId})`);
     console.log(`Body:`);
     console.log(` Hi there,`);
     console.log(` `);
     console.log(` We're sorry, but there was an issue processing your order #${orderId}.`);
     console.log(` Reason: ${reason || 'An unexpected error occurred.'}`); // Hi·ªÉn th·ªã l√Ω do
     console.log(` `);
     console.log(` If you were charged, a refund should be processed automatically (if applicable).`);
     console.log(` Please contact customer support if you have any questions.`);
     console.log(` `);
     console.log(` - The Ga Ran Temporal Team`);
     console.log("----------------------------------\n");
     // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
     await new Promise(resolve => setTimeout(resolve, 400)); // 400ms delay gi·∫£ l·∫≠p
     // --- K·∫øt th√∫c M√¥ ph·ªèng ---

     // Gi·∫£ s·ª≠ lu√¥n th√†nh c√¥ng
     this.logger.warn(`‚úÖ Successfully simulated sending failure email for Order ID: ${orderId} to ${email}`);
     // Trong th·ª±c t·∫ø, ·ªü ƒë√¢y c√≥ th·ªÉ c√≥ try...catch
  }
}